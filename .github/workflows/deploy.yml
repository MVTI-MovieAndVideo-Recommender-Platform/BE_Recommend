# .github/workflows/deploy.yml
name: Deploy to AWS Lambda

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Log in to Amazon ECR
        id: login-ecr
        run: |
          aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin 992382391800.dkr.ecr.ap-northeast-2.amazonaws.com

      - name: Delete old images from ECR
        env:
          AWS_REGION: ap-northeast-2
          ECR_REPOSITORY: mvti_be_recommend
        run: |
          # Get the list of image IDs
          IMAGE_IDS=$(aws ecr list-images --repository-name $ECR_REPOSITORY --region $AWS_REGION --query 'imageIds[*]' --output json)

          # Delete the images
          if [ "$IMAGE_IDS" != "[]" ]; then
            aws ecr batch-delete-image --repository-name $ECR_REPOSITORY --region $AWS_REGION --image-ids "$IMAGE_IDS"
          fi

      - name: Build, tag, and push image to ECR
        env:
          ECR_REGISTRY: 992382391800.dkr.ecr.ap-northeast-2.amazonaws.com
          ECR_REPOSITORY: mvti_be_recommend
          IMAGE_TAG: latest
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SERVER_SECRET_KEY: ${{ secrets.SERVER_SECRET_KEY }}
          MYSQLDB_HOST: ${{ secrets.MYSQLDB_HOST }}
          MONGODB_HOST: ${{ secrets.MONGODB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PWD: ${{ secrets.DB_PWD }}
          MYSQLDB_NAME: ${{ secrets.MYSQLDB_NAME }}
          KAFKA_HOST: ${{ secrets.KAFKA_HOST }}
        run: |
          # Build the Docker image with build-arg variables
          docker build -t $ECR_REPOSITORY \
            --build-arg AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            --build-arg AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            --build-arg SERVER_SECRET_KEY=$SERVER_SECRET_KEY \
            --build-arg MYSQLDB_HOST=$MYSQLDB_HOST \
            --build-arg MONGODB_HOST=$MONGODB_HOST \
            --build-arg DB_USER=$DB_USER \
            --build-arg DB_PWD=$DB_PWD \
            --build-arg MYSQLDB_NAME=$MYSQLDB_NAME \
            --build-arg KAFKA_HOST=$KAFKA_HOST .

          # Tag the Docker image
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest

          # Push the Docker image to ECR
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Update Lambda function
        env:
          AWS_REGION: ap-northeast-2
          FUNCTION_NAME: arn:aws:lambda:ap-northeast-2:992382391800:function:mvti-recommend-server
          ECR_IMAGE_URI: 992382391800.dkr.ecr.ap-northeast-2.amazonaws.com/mvti_be_recommend:latest
        run: |
          # Update the Lambda function with the new image
          aws lambda update-function-code --function-name $FUNCTION_NAME --image-uri $ECR_IMAGE_URI --region $AWS_REGION
